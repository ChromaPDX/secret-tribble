require 'tmpdir'
require 'nokogiri'
require 'uglifier'
require 'cssminify'

TARGET_DIR = File.join( File.dirname(__FILE__), 'v1', 'static', 'public' )
SRC_DIR = File.join( File.dirname(__FILE__), 'v1', 'static', 'src' )

task :default => :build

desc 'Builds the static site'
task :build do
  start_time = Time.now

  # reads the list of files out of SRC_DIR and appends them together
  def combine( path_list )
    path_list
      .collect { |p| File.read( File.join(SRC_DIR, p) ) }
      .join("\n\n")
  end

  # shortcut for writing out files, ensures directories exist
  def write( path, data )
    FileUtils.mkdir_p( File.dirname( path ) )
    File.open( path, 'w' ) do |f|
      f.write( data )
    end
    
    data.length
  end
  
  # set up the temp dir. If this all crashes, the temp dir will be retained.
  TMP_DIR = Dir.mktmpdir
  puts "Building in #{TMP_DIR} ..."

  begin
    profile = {}
    
    doc = Nokogiri::HTML(File.open( File.join(SRC_DIR, 'index.html')))

    # find the CSS and JS files
    header_css = doc.css("head link").collect { |l| l.attr('href') }
    header_js = doc.css("head script").collect { |s| s.attr('src') }

    header_css_blob = combine( header_css )
    header_js_blob = combine( header_js )

    if ENV['COMPRESS']
      # minified CSS and JS
      profile[:header_js] = write( File.join( TMP_DIR, "js", "header.min.js" ), Uglifier.new.compile( header_js_blob ) )
      profile[:header_css] = write( File.join( TMP_DIR, "css", "header.min.css" ), CSSminify.compress( header_css_blob ) )
    else
      # full size CSS and JS
      profile[:header_css] = write( File.join( TMP_DIR, "css", "header.css" ), header_css_blob )
      profile[:header_js] = write( File.join( TMP_DIR, "js", "header.js" ), header_js_blob )
    end
    
    # strip all the #HOOVER# lines out of index, and replace #HEADER# with links to the CSS and JS.
    index_html = ""
    File.open( File.join(SRC_DIR, "index.html") ).each do |line|
      next if line =~ /#HOOVER#/
      if line =~ /#HEADER#/
        if ENV['COMPRESS']
          css_file = "/css/header.min.css"
          js_file = "/js/header.min.js"
        else
          css_file = "/css/header.css"
          js_file = "/js/header.js"
        end
        index_html << "<link href=\"#{css_file}\" rel=\"stylesheet\" type=\"text/css\">" << "\n"
        index_html << "<script src=\"#{js_file}\"></script>" << "\n"
        next
      end

      index_html << line
    end

    # write out the new index
    profile[:index] = write( File.join( TMP_DIR, "index.html" ), index_html )

    # total up the bytes
    profile[:total] = profile.each_value.reduce :+

    puts "header js => #{profile[:header_js]}"
    puts "header css => #{profile[:header_css]}"
    puts "combined => #{profile[:total]}"
    puts "gzip est => #{profile[:total] / 2}"

    # move the other targets
    FileUtils.cp_r File.join( SRC_DIR, "templates" ), TMP_DIR
    FileUtils.cp File.join( SRC_DIR, "favicon.ico" ), TMP_DIR
    
    # clean out the target dir
    FileUtils.rm_rf TARGET_DIR
  
    # Move all files over to the target!
    FileUtils.cp_r TMP_DIR, TARGET_DIR

    puts "Cleaning up #{TMP_DIR} ..."
    FileUtils.rm_rf TMP_DIR
  rescue => e
    puts e
  end
    
    puts "Built in #{Time.now - start_time}s."
end
